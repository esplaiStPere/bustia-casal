{"version":3,"sources":["components/Header.js","components/Left.js","components/CrearNota.js","components/Loading.js","components/Right.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Left","CreaNota","noms","enviarEmail","error","success","loader","listMonis","map","moni","key","id","Form","onSubmit","FormGroup","controlId","Label","Control","required","type","placeholder","autoComplete","Group","as","defaultChecked","rows","Text","Alert","show","variant","Heading","Button","onClick","window","location","reload","Container","Row","Loading","props","Right","state","render","correu","firebase","apps","length","initializeApp","apiKey","databaseURL","database","ref","off","once","data","setState","val","e","this","preventDefault","nomInfant","document","getElementById","nomMoni","textNota","respondre","index","indexOf","value","variables","from_name","to_name","message_html","send_to","reply_to","console","log","emailjs","send","then","result","catch","hola","bind","Component","App","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.20062c24.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"headerStyle\">\r\n            <h1 className=\"mainTitle\">Bústia</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Header from './Header';\r\n\r\nfunction Left() {\r\n    return (\r\n        <div className=\"left\">\r\n            <Header />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Left;","import React, { useState } from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport FormGroup from 'react-bootstrap/FormGroup';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nexport default function CreaNota({ noms, enviarEmail, error, success, loader }) {\r\n\r\n    const listMonis = noms.map((moni) => \r\n        <option key={moni.id} >{ moni }</option>\r\n    )\r\n\r\n    function sendEmail(e) {\r\n\r\n        e.preventDefault();\r\n        console.log(\"Enviant mail (jk)\")\r\n\r\n    } \r\n\r\n    /*function sendEmail(e) {\r\n\r\n        setLoad(true);\r\n\r\n        var nomInfant = document.getElementById('NomInfant');\r\n        var nomMoni = document.getElementById('monisSelect');\r\n        var textNota = document.getElementById('noteta');\r\n        var respondre = document.getElementById('replyEmail');\r\n\r\n\r\n        var variables = {\r\n            from_name: nomInfant.value,\r\n            to_name: correus[nomMoni.value][\"nom\"],\r\n            message_html: textNota.value,\r\n            send_to: correus[nomMoni.value][\"correu\"],\r\n            reply_to: respondre.value\r\n        }\r\n\r\n        console.log(variables)\r\n\r\n        e.preventDefault();\r\n\r\n        window.emailjs.send('gmail', 'template_NzzwThX7', variables)\r\n            .then((result) => {\r\n                console.log(\"Missatge enviat!\");\r\n                setLoad(false);\r\n                setSuccess(true);\r\n            }).catch( (error) => {\r\n                console.log(\"Missatge no enviat!\");\r\n                setLoad(false);\r\n                setError(true);\r\n            });\r\n    }*/\r\n    \r\n    return (\r\n        <Form id=\"form\" className=\"MainForm\" onSubmit={ enviarEmail } >\r\n\r\n            {/* Demanem el nom de l'nfant */}\r\n            <FormGroup controlId=\"NomInfant\" >\r\n                <Form.Label>Escriu aquí el teu nom</Form.Label>\r\n                <Form.Control required type=\"text\" placeholder=\"El teu nom\" autoComplete=\"off\" />\r\n            </FormGroup>\r\n            \r\n            {/* Demanem el moni a qui se li vol enviar la nota */}\r\n            <Form.Group controlId=\"monisSelect\">\r\n                <Form.Label>A quin monitor/a li vols enviar la noteta?</Form.Label>\r\n                <Form.Control as=\"select\" defaultChecked=\"Tots els monitors i monitores\" >\r\n                    { listMonis }\r\n                </Form.Control>\r\n            </Form.Group>\r\n\r\n            {/* Demanem el text de la nota */}\r\n            <Form.Group required controlId=\"noteta\">\r\n                <Form.Label>Escriu aquí la noteta</Form.Label>\r\n                <Form.Control as=\"textarea\" rows=\"5\" />\r\n            </Form.Group>\r\n\r\n\r\n            {/* Correu per respondre */}\r\n            <Form.Group controlId=\"replyEmail\">\r\n                <Form.Label>Si vols que el monitor/a et respongui, escriu el teu correu aquí!</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"Escriu el teu correu aquí\" />\r\n                <Form.Text className=\"text-muted\">\r\n                    Assegura't que l'escrius bé!\r\n                </Form.Text>\r\n            </Form.Group>\r\n\r\n            {/* Alerta per si funciona */}\r\n            <Alert show={success} variant=\"success\" >\r\n                <Alert.Heading>Missatge enviat correctament!</Alert.Heading>\r\n                <p>\r\n                    Ara ja pots esborrar la noteta o algú altre la podrà llegir!\r\n                </p>\r\n                <hr />\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <Button onClick={() => window.location.reload(false)} variant=\"outline-success\">\r\n                        Esborra la noteta!\r\n                    </Button>\r\n                </div>\r\n            </Alert>\r\n\r\n            {/* Alerta per si NO funciona */}\r\n            <Alert show={error} variant=\"danger\" >\r\n                <Alert.Heading>Hi ha hagut un error a l'enviar la nota!</Alert.Heading>\r\n                <p>\r\n                    Prova a refrescar la pàgina i tornar a escriure la nota\r\n                </p>\r\n                <hr />\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <Button onClick={() => window.location.reload(false)} variant=\"outline-danger\">\r\n                        Refresca la pàgina\r\n                    </Button>\r\n                </div>\r\n            </Alert>\r\n\r\n            {/* Submit button */}\r\n            <Container>\r\n                <Row className=\"loadButton\">\r\n                    <Button variant=\"primary\" type=\"submit\" id=\"enviar\" >\r\n                        <span className=\"buttonText\">Enviar noteta</span>\r\n                        { loader ? <div className=\"loaderContainer\"> <div className=\"loader\"></div> </div> : null }\r\n                    </Button>\r\n                </Row>\r\n            </Container>\r\n\r\n        </Form>\r\n    );\r\n}","import React from 'react';\r\n\r\nfunction Loading(props) {\r\n    return (\r\n        <div className=\"loading\" >\r\n            <h1>Carregant...</h1>\r\n            <div className=\"lds-dual-ring\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React, { Component } from 'react';\r\nimport CrearNota from './CrearNota';\r\nimport Loading from './Loading';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nexport class Right extends Component {\r\n\r\n    state = {\r\n        render: true,\r\n        listMonis: [],\r\n        error: false,\r\n        success: false,\r\n        loader: false,\r\n        correu: \"\"\r\n    }\r\n \r\n    componentWillMount() {\r\n        const firebaseConfig = {\r\n            apiKey: \"AIzaSyC8TUSkcnGAIq4zsqbCl4SXnqzvjYJj-b4\",\r\n            databaseURL: \"https://bustia-casal.firebaseio.com\"\r\n        };\r\n        if (!firebase.apps.length) {\r\n            firebase.initializeApp(firebaseConfig);\r\n        }\r\n    \r\n        firebase.database().ref().off();\r\n        firebase.database().ref('0').once('value', (data) => {\r\n            this.setState( {\r\n                listMonis: data.val(),\r\n                render: false\r\n            });\r\n        })\r\n    }\r\n    \r\n    hola(e) {\r\n        this.setState({\r\n            loader: true\r\n        })\r\n        e.preventDefault();\r\n\r\n        var nomInfant = document.getElementById('NomInfant');\r\n        var nomMoni = document.getElementById('monisSelect');\r\n        var textNota = document.getElementById('noteta');\r\n        var respondre = document.getElementById('replyEmail');\r\n\r\n        var index = this.state.listMonis.indexOf(nomMoni.value);\r\n        firebase.database().ref().off();\r\n        firebase.database().ref('1').once('value', (data) => {\r\n            this.setState({\r\n                correu: data.val()[index]\r\n            })\r\n            var variables = {\r\n                from_name: nomInfant.value,\r\n                to_name: nomMoni.value,\r\n                message_html: textNota.value,\r\n                send_to: this.state.correu,\r\n                reply_to: respondre.value\r\n            }\r\n    \r\n            console.log(variables)\r\n    \r\n    \r\n            window.emailjs.send('gmail', 'template_NzzwThX7', variables)\r\n                .then((result) => {\r\n                    console.log(\"Missatge enviat!\");\r\n                    this.setState({\r\n                        loader: false,\r\n                        success: true\r\n                    })\r\n                }).catch( (error) => {\r\n                    console.log(\"Missatge no enviat!\");\r\n                    this.setState({\r\n                        loader: false,\r\n                        error: true\r\n                    })\r\n                });\r\n        })\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"right\">\r\n                {this.state.render ? <Loading /> : <CrearNota noms={ this.state.listMonis } \r\n                                                              enviarEmail={ this.hola.bind(this) } \r\n                                                              error={this.state.error} \r\n                                                              success={this.state.success}\r\n                                                              loader={this.state.loader}\r\n                                                    />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Right;","import React from 'react';\n\nimport './App.css';\n\nimport Left from './components/Left';\nimport Right from './components/Right';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Left />\n      <Right />\n    </div>\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}